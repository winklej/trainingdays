(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{695:function(t,e,s){t.exports=s.p+"assets/img/cert-manager-workloads.dd792c6e.png"},696:function(t,e,s){t.exports=s.p+"assets/img/https-inspector.4dacbadc.png"},799:function(t,e,s){"use strict";s.r(e);var a=s(10),n=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"bonus-optional-secure-endpoints-with-ssl-certificates"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#bonus-optional-secure-endpoints-with-ssl-certificates"}},[t._v("#")]),t._v(" Bonus (optional): Secure Endpoints with SSL Certificates")]),t._v(" "),e("h2",{attrs:{id:"here-is-what-you-will-learn-üéØ"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#here-is-what-you-will-learn-üéØ"}},[t._v("#")]),t._v(" Here is what you will learn üéØ")]),t._v(" "),e("p",[t._v("In this optional challenge, you will learn to secure your ingress traffic using TLS (HTTPS). To facilitate the issuance and management of certificates, we will introduce a tool called "),e("code",[t._v("cert-manager")]),t._v(".")]),t._v(" "),e("p",[t._v("The "),e("code",[t._v("cert-manager")]),t._v(" is a Kubernetes add-on to automate the "),e("em",[t._v("management")]),t._v(" and "),e("em",[t._v("issuance")]),t._v(" of "),e("em",[t._v("TLS certificates")]),t._v(" from various issuing sources.")]),t._v(" "),e("p",[t._v("It will ensure certificates are valid and up to date periodically, and attempt to renew certificates at an appropriate time before expiry.")]),t._v(" "),e("h1",{attrs:{id:"table-of-contents"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#table-of-contents"}},[t._v("#")]),t._v(" Table Of Contents")]),t._v(" "),e("ol",[e("li",[e("a",{attrs:{href:"#create-a-new-separate-namespace-for-the-cert-manager"}},[t._v("Create a new separate Namespace for the Cert-Manager")])]),t._v(" "),e("li",[e("a",{attrs:{href:"#add-the-jetstack-helm-repository"}},[t._v("Add the Jetstack Helm Repository")])]),t._v(" "),e("li",[e("a",{attrs:{href:"#install-the-cert-manager-helm-chart"}},[t._v("Install the Cert-Manager Helm Chart")])]),t._v(" "),e("li",[e("a",{attrs:{href:"#add-a-letsencrypt-cluster-issuer"}},[t._v("Add a LetsEncrypt Cluster Issuer")])]),t._v(" "),e("li",[e("a",{attrs:{href:"#update-your-frontend-ingress-configuration"}},[t._v("Update your Frontend Ingress Configuration")])]),t._v(" "),e("li",[e("a",{attrs:{href:"#update-your-api-ingress-configurations"}},[t._v("Update your API Ingress Configurations")])]),t._v(" "),e("li",[e("a",{attrs:{href:"#check"}},[t._v("Check")])])]),t._v(" "),e("h2",{attrs:{id:"create-a-new-separate-namespace-for-the-cert-manager"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#create-a-new-separate-namespace-for-the-cert-manager"}},[t._v("#")]),t._v(" Create a new separate Namespace for the Cert-Manager")]),t._v(" "),e("p",[t._v("To separate the "),e("code",[t._v("cert-manager")]),t._v(" from the rest of our resources, let's create a new namespace:")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[t._v("kubectl create namespace cert-manager\n")])])]),e("h2",{attrs:{id:"add-the-jetstack-helm-repository"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#add-the-jetstack-helm-repository"}},[t._v("#")]),t._v(" Add the Jetstack Helm Repository")]),t._v(" "),e("p",[e("code",[t._v("cert-manager")]),t._v(" comes with a set of different pods and custom resources so we will use helm to install all of it's components in one go.")]),t._v(" "),e("p",[t._v("First, we have to add the official repository from jetstack which contains the "),e("code",[t._v("cert-manager")]),t._v(" helm chart via:")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[t._v("helm repo "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" jetstack https://charts.jetstack.io\nhelm repo update\n")])])]),e("p",[t._v("We will prepare a small configuration for the helm chart.")]),t._v(" "),e("p",[t._v("Basically we want the Kubernetes "),e("em",[t._v("Custom Resource Definitions")]),t._v(" to be installed together with the chart and set some default values in terms of how TLS certificates are issued for our Ingress resources:")]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# cert-manager-values.yaml")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("installCRDs")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("true")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# install custom resource definitions")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ingressShim")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("defaultIssuerKind")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ClusterIssuer\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("defaultIssuerName")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" letsencrypt"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("prod\n")])])]),e("h2",{attrs:{id:"install-the-cert-manager-helm-chart"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#install-the-cert-manager-helm-chart"}},[t._v("#")]),t._v(" Install the Cert-Manager Helm Chart")]),t._v(" "),e("p",[t._v("Now that we have prepared the configuration we can install (or upgrade) "),e("code",[t._v("cert-manager")]),t._v(" using a single command:")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[t._v("$ helm upgrade "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-i")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-f")]),t._v(" cert-manager-values.yaml "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--namespace")]),t._v(" cert-manager cert-manager jetstack/cert-manager\n\nRelease "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"cert-manager"')]),t._v(" does not exist. Installing it now.\nNAME: cert-manager\nLAST DEPLOYED: Tue Nov  "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),t._v(":50:17 "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2020")]),t._v("\nNAMESPACE: cert-manager\nSTATUS: deployed\nREVISION: "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\nTEST SUITE: None\nNOTES:\ncert-manager has been deployed successfully"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("\n\nIn order to begin issuing certificates, you will need to "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" up a ClusterIssuer\nor Issuer resource "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("for example, by creating a "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'letsencrypt-staging'")]),t._v(" issuer"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(".\n\nMore information on the different types of issuers and how to configure them\ncan be found "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" our documentation:\n\nhttps://cert-manager.io/docs/configuration/\n\nFor information on how to configure cert-manager to automatically provision\nCertificates "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" Ingress resources, take a "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("look")]),t._v(" at the "),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("ingress-shim"),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v("\ndocumentation:\n\nhttps://cert-manager.io/docs/usage/ingress/\n")])])]),e("p",[t._v("If you take a look at the Kubernetes dashboard under the "),e("code",[t._v("cert-manager")]),t._v(" namespace you should see a few green deployments showing up after a few seconds:")]),t._v(" "),e("p",[e("img",{attrs:{src:s(695),alt:"cert-manager namespace on the kubernetes dashboard"}})]),t._v(" "),e("h2",{attrs:{id:"add-a-letsencrypt-cluster-issuer"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#add-a-letsencrypt-cluster-issuer"}},[t._v("#")]),t._v(" Add a LetsEncrypt Cluster Issuer")]),t._v(" "),e("p",[t._v("To make "),e("code",[t._v("cert-manager")]),t._v(" fully functional, we'll need to create a so called "),e("code",[t._v("Issuer")]),t._v(". "),e("em",[t._v("Issuers")]),t._v(", as their name suggests, issue TLS certificates for us.")]),t._v(" "),e("p",[t._v("For our sample application, we'll rely on the free service of "),e("a",{attrs:{href:"https://letsencrypt.org",target:"_blank",rel:"noopener noreferrer"}},[t._v("letsencrypt.org"),e("OutboundLink")],1),t._v(".")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),e("p",[t._v("üìù Let‚Äôs Encrypt is a free, automated and open certificate authority (CA), run for the public‚Äôs benefit. It is a service provided by the Internet Security Research Group (ISRG).")])]),t._v(" "),e("p",[t._v("To configure Issuers (and manage the state of certificates) "),e("code",[t._v("cert-manager")]),t._v(" comes with a set of Custom Resource Definitions (CRDs). CRDs are used to extend the set of existing resources in Kubernetes with custom ones. They are one of the main extension mechanisms of Kubernetes.")]),t._v(" "),e("p",[e("code",[t._v("cert-manager")]),t._v(" knows two kinds of Issuers:")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("Issuer")]),t._v(": this is a namespaced resource that is only available for the namespace it is stored in.")]),t._v(" "),e("li",[e("code",[t._v("ClusterIssuer")]),t._v(": this is a cluster wide resource that is available for all namespaces.")])]),t._v(" "),e("p",[t._v("For our example, we will create a "),e("code",[t._v("ClusterIssuer")]),t._v(" since we trust all resources in our cluster.")]),t._v(" "),e("p",[t._v("To define our "),e("code",[t._v("ClusterIssuer")]),t._v(" we again use a YAML file that we will apply to our cluster. Let's take a look:")]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# letsencrypt-prod-cluster-issuer.yaml")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("apiVersion")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" cert"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("manager.io/v1\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("kind")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ClusterIssuer\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("metadata")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" letsencrypt"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("prod\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spec")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("acme")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("server")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" https"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("//acme"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("v02.api.letsencrypt.org/directory\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("email")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" update.your@email.com\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("privateKeySecretRef")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" letsencrypt"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("prod\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("solvers")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("http01")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n          "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ingress")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("class")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nginx\n")])])]),e("p",[t._v("Don't forget to update your email-address! The email address you provide will be used by Let's Encrypt to notify you of expiring certificates.")]),t._v(" "),e("p",[t._v("Hopefully you will never receive such notification because "),e("code",[t._v("cert-manager")]),t._v(" should take care of the certificate renewal process for you.")]),t._v(" "),e("p",[t._v("Let's apply our configuration:")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[t._v("kubectl apply "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-f")]),t._v(" letsencrypt-prod-cluster-issuer.yaml\n")])])]),e("h2",{attrs:{id:"update-your-frontend-ingress-configuration"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#update-your-frontend-ingress-configuration"}},[t._v("#")]),t._v(" Update your Frontend Ingress Configuration")]),t._v(" "),e("p",[t._v("Only two things are missing to complete our super secure TLS setup. We need to upgrade our ingress configurations for the frontend and the API(s).")]),t._v(" "),e("p",[t._v("We'll want to add two things each:")]),t._v(" "),e("ul",[e("li",[t._v("A "),e("code",[t._v("kubernetes.io/tls-acme: true")]),t._v(" annotation to enable the management of the TLS certificate through cert manager.")]),t._v(" "),e("li",[t._v("A "),e("code",[t._v("tls")]),t._v(" section in our Ingress "),e("code",[t._v("spec")]),t._v(" to define the hostname for the certificate and the name of the Kubernetes secret to store the certificate safely.")])]),t._v(" "),e("p",[t._v("Additionally, we also tell NGINX to always redirect unencrypted traffic to use SSL ("),e("code",[t._v("nginx.ingress.kubernetes.io/ssl-redirect: 'true'")]),t._v(")")]),t._v(" "),e("p",[t._v("The following shows how your "),e("code",[t._v("Ingress")]),t._v(" section for the frontend deployment should look like. Make sure you don't forget to update your domain names. Usually you'll want your TLS host to match the hostname for the ingress rule you have configured:")]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("apiVersion")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" networking.k8s.io/v1\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("kind")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Ingress\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("metadata")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ing"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("frontend\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("annotations")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("nginx.ingress.kubernetes.io/enable-cors")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'true'")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("nginx.ingress.kubernetes.io/cors-allow-headers")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization,Accept-Language'")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("nginx.ingress.kubernetes.io/cors-max-age")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'600'")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("nginx.ingress.kubernetes.io/proxy-body-size")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'12m'")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("kubernetes.io/tls-acme")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'true'")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("nginx.ingress.kubernetes.io/ssl-redirect")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'true'")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spec")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ingressClassName")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nginx\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tls")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("hosts")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" 20"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("67"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("122"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("249.nip.io "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# this should be replaced with YOUR OWN DOMAIN")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("secretName")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" tls"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("secret\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("rules")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("host")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 20"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("67"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("122"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("249.nip.io "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# this should be replaced with YOUR OWN DOMAIN")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("http")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("paths")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n          "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("path")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" /\n            "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("pathType")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Prefix\n            "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("backend")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n              "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("service")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" frontend\n                "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("port")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("number")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("8080")]),t._v("\n")])])]),e("p",[t._v("If you access you website again you'll notice that after a few moments it's already being served through https and that your browser is redirected to the safe endpoint automatically.")]),t._v(" "),e("h2",{attrs:{id:"update-your-api-ingress-configurations"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#update-your-api-ingress-configurations"}},[t._v("#")]),t._v(" Update your API Ingress Configurations")]),t._v(" "),e("p",[t._v("It's important not to forget to update our Ingress definitions for the other APIs as well. We would not want to deliver the static website client on a secure channel while leaving sensitive information from our APIs in the open.")]),t._v(" "),e("p",[t._v("Just like we did for the frontend, we also add the "),e("code",[t._v("kubernetes.io/tls-acme: 'true'")]),t._v(" and "),e("code",[t._v("nginx.ingress.kubernetes.io/ssl-redirect: 'true'")]),t._v(" annotations and the "),e("code",[t._v("tls")]),t._v(" configuration to the "),e("code",[t._v("spec")]),t._v(" section of our other ingress configurations.")]),t._v(" "),e("p",[t._v("Here is the example from the contacts API:")]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("apiVersion")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" networking.k8s.io/v1\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("kind")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Ingress\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("metadata")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ing"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("contacts\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("annotations")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("nginx.ingress.kubernetes.io/enable-cors")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'true'")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("nginx.ingress.kubernetes.io/cors-allow-headers")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization,Accept-Language'")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("nginx.ingress.kubernetes.io/cors-max-age")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'600'")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("nginx.ingress.kubernetes.io/proxy-body-size")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'12m'")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("nginx.ingress.kubernetes.io/rewrite-target")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/contacts/$2'")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("nginx.ingress.kubernetes.io/use-regex")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'true'")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("kubernetes.io/tls-acme")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'true'")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("nginx.ingress.kubernetes.io/ssl-redirect")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'true'")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spec")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ingressClassName")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nginx\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tls")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("hosts")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" 20"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("67"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("122"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("249.nip.io "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# this should be replaced with YOUR OWN DOMAIN")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("secretName")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" tls"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("secret\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("rules")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("host")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 20"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("67"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("122"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("249.nip.io "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# this should be replaced with YOUR OWN DOMAIN")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("http")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("paths")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n          "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("path")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" /api/contacts(\\/"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v("$)(."),e("span",{pre:!0,attrs:{class:"token important"}},[t._v("*)")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("pathType")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Prefix\n            "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("backend")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n              "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("service")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" contactsapi\n                "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("port")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("number")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("8080")]),t._v("\n")])])]),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),e("p",[t._v("‚ö†Ô∏è Adjust all Ingress definitions!")]),t._v(" "),e("p",[t._v("You also need to adjust (and apply) "),e("strong",[t._v("all other ingress definitions")]),t._v(", for:")]),t._v(" "),e("ul",[e("li",[t._v("Search Service")]),t._v(" "),e("li",[t._v("Visit Reports Service")]),t._v(" "),e("li",[t._v("Resources Service")])])]),t._v(" "),e("h2",{attrs:{id:"check"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#check"}},[t._v("#")]),t._v(" Check")]),t._v(" "),e("p",[t._v("Now let's check if everything connects as expected.")]),t._v(" "),e("p",[t._v("Navigate to you contacts website and use your browsers developer tools to make sure both the initial request to the website, as well as any subsequent request to the contacts API use secure HTTPS endpoints:")]),t._v(" "),e("p",[e("img",{attrs:{src:s(696),alt:"A display of the browsers developer tools"}})]),t._v(" "),e("p",[t._v("If both requests are being served over HTTPS were good to go!")]),t._v(" "),e("p",[e("RouterLink",{attrs:{to:"/day7/challenges/challenge-4.html"}},[t._v("‚óÄ Previous challenge")]),t._v(" | "),e("RouterLink",{attrs:{to:"/day7/"}},[t._v("üîº Day 7")])],1)])}),[],!1,null,null,null);e.default=n.exports}}]);